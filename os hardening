#!/bin/bash
#
# Simple Linux OS Hardening Script
# --------------------------------
# This script implements basic security measures for Linux systems
# Works on most distributions: Ubuntu, Debian, CentOS, RHEL, AlmaLinux, etc.
# Run as root: sudo bash simple_hardening.sh
#

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Function to display section headers
print_section() {
    echo -e "${GREEN}[+] $1${NC}"
}

# Function to display success messages
print_success() {
    echo -e "  ${GREEN}✓${NC} $1"
}

# Function to display warning messages
print_warning() {
    echo -e "  ${YELLOW}!${NC} $1"
}

# Function to display error messages
print_error() {
    echo -e "  ${RED}✗${NC} $1" >&2
}

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    print_error "This script must be run as root. Try 'sudo bash $0'"
    exit 1
fi

# Detect the Linux distribution
print_section "Detecting Linux distribution"
if [ -f /etc/os-release ]; then
    . /etc/os-release
    DISTRO=$ID
    DISTRO_VERSION=$VERSION_ID
    print_success "Detected: $NAME $VERSION_ID"
else
    print_warning "Could not determine distribution, continuing with generic settings"
    DISTRO="unknown"
fi

# 1. Update the system
print_section "Updating system packages"
case $DISTRO in
    ubuntu|debian|linuxmint)
        apt update -y && apt upgrade -y
        print_success "System updated via apt"
        ;;
    centos|rhel|fedora|almalinux|rocky)
        if command -v dnf &>/dev/null; then
            dnf update -y
            print_success "System updated via dnf"
        else
            yum update -y
            print_success "System updated via yum"
        fi
        ;;
    *)
        print_warning "Unknown distribution, skipping system update"
        ;;
esac

# 2. Secure SSH
print_section "Securing SSH Configuration"
SSHD_CONFIG="/etc/ssh/sshd_config"

if [ -f "$SSHD_CONFIG" ]; then
    # Create backup
    cp $SSHD_CONFIG ${SSHD_CONFIG}.bak
    
    # Apply security settings
    sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin no/' $SSHD_CONFIG
    sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication no/' $SSHD_CONFIG
    sed -i 's/^#\?X11Forwarding.*/X11Forwarding no/' $SSHD_CONFIG
    sed -i 's/^#\?MaxAuthTries.*/MaxAuthTries 3/' $SSHD_CONFIG
    sed -i 's/^#\?ClientAliveInterval.*/ClientAliveInterval 300/' $SSHD_CONFIG
    sed -i 's/^#\?ClientAliveCountMax.*/ClientAliveCountMax 2/' $SSHD_CONFIG

    # Restart SSH service
    if systemctl is-active sshd &>/dev/null; then
        systemctl restart sshd
    elif systemctl is-active ssh &>/dev/null; then
        systemctl restart ssh
    else
        print_warning "SSH service not found. Please restart it manually."
    fi
    
    print_success "SSH hardened"
    print_warning "⚠️ NOTE: SSH now requires key-based authentication"
    print_warning "⚠️ Make sure you have key access before disconnecting!"
else
    print_warning "SSH config file not found at $SSHD_CONFIG"
fi

# 3. Configure basic firewall
print_section "Setting up basic firewall"

# Try using ufw (Ubuntu/Debian)
if command -v ufw &>/dev/null; then
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow ssh
    ufw allow 80/tcp
    ufw allow 443/tcp
    echo 'y' | ufw enable
    print_success "UFW firewall configured"

# Try using firewalld (RHEL/CentOS/Fedora)
elif command -v firewall-cmd &>/dev/null; then
    systemctl enable --now firewalld
    firewall-cmd --set-default-zone=public
    firewall-cmd --permanent --zone=public --add-service=ssh
    firewall-cmd --permanent --zone=public --add-service=http
    firewall-cmd --permanent --zone=public --add-service=https
    firewall-cmd --reload
    print_success "Firewalld configured"

# Fallback to basic iptables
elif command -v iptables &>/dev/null; then
    # Flush current rules
    iptables -F
    
    # Set default policies
    iptables -P INPUT DROP
    iptables -P FORWARD DROP
    iptables -P OUTPUT ACCEPT
    
    # Allow established connections
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    
    # Allow localhost
    iptables -A INPUT -i lo -j ACCEPT
    
    # Allow SSH, HTTP, HTTPS
    iptables -A INPUT -p tcp --dport 22 -j ACCEPT
    iptables -A INPUT -p tcp --dport 80 -j ACCEPT
    iptables -A INPUT -p tcp --dport 443 -j ACCEPT
    
    # Save rules if possible
    if command -v iptables-save &>/dev/null; then
        if [ -d /etc/sysconfig ]; then
            iptables-save > /etc/sysconfig/iptables
        elif [ -d /etc/iptables ]; then
            iptables-save > /etc/iptables/rules.v4
        else
            iptables-save > /etc/iptables.rules
        fi
    fi
    print_success "Basic iptables firewall configured"
else
    print_warning "No supported firewall found. Please install and configure a firewall manually."
fi

# 4. Configure secure kernel parameters
print_section "Hardening kernel parameters with sysctl"

cat > /etc/sysctl.d/90-security.conf << EOF
# IP Spoofing protection
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Ignore ICMP broadcast requests
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Disable source packet routing
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0

# Ignore send redirects
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# Block SYN attacks
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 2048
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5

# Log Martians
net.ipv4.conf.all.log_martians = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Disable ICMP redirects
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0

# Disable IP forwarding
net.ipv4.ip_forward = 0

# Enable address space layout randomization (ASLR)
kernel.randomize_va_space = 2

# Disable the magic-sysrq key
kernel.sysrq = 0
EOF

sysctl -p /etc/sysctl.d/90-security.conf
print_success "Kernel parameters hardened"

# 5. Set up basic password policies
print_section "Setting up password policies"

# Install password quality package
case $DISTRO in
    ubuntu|debian|linuxmint)
        apt install -y libpam-pwquality
        ;;
    centos|rhel|fedora|almalinux|rocky)
        if command -v dnf &>/dev/null; then
            dnf install -y libpwquality
        else
            yum install -y libpwquality
        fi
        ;;
    *)
        print_warning "Unknown distribution, skipping password quality package installation"
        ;;
esac

# Configure password aging
if [ -f /etc/login.defs ]; then
    sed -i 's/^PASS_MAX_DAYS.*/PASS_MAX_DAYS   90/' /etc/login.defs
    sed -i 's/^PASS_MIN_DAYS.*/PASS_MIN_DAYS   1/' /etc/login.defs
    sed -i 's/^PASS_WARN_AGE.*/PASS_WARN_AGE   7/' /etc/login.defs
    print_success "Password aging configured"
fi

# Configure password complexity
if [ -f /etc/security/pwquality.conf ]; then
    sed -i 's/^# minlen =.*/minlen = 12/' /etc/security/pwquality.conf
    sed -i 's/^# dcredit =.*/dcredit = -1/' /etc/security/pwquality.conf
    sed -i 's/^# ucredit =.*/ucredit = -1/' /etc/security/pwquality.conf
    sed -i 's/^# lcredit =.*/lcredit = -1/' /etc/security/pwquality.conf
    sed -i 's/^# ocredit =.*/ocredit = -1/' /etc/security/pwquality.conf
    sed -i 's/^# difok =.*/difok = 3/' /etc/security/pwquality.conf
    sed -i 's/^# enforce_for_root.*/enforce_for_root/' /etc/security/pwquality.conf
    print_success "Password complexity configured"
fi

# 6. Disable unnecessary services
print_section "Disabling unnecessary services"

SERVICES_TO_DISABLE=(
    "avahi-daemon"
    "cups"
    "rpcbind"
    "telnet"
    "xinetd"
)

for service in "${SERVICES_TO_DISABLE[@]}"; do
    if systemctl list-unit-files | grep -q "$service"; then
        systemctl disable --now "$service" 2>/dev/null
        print_success "Disabled $service"
    fi
done

# 7. Secure shared memory
print_section "Securing shared memory"

if ! grep -q '/dev/shm' /etc/fstab; then
    echo "tmpfs /dev/shm tmpfs defaults,noexec,nosuid,nodev 0 0" >> /etc/fstab
    mount -o remount,noexec,nosuid,nodev /dev/shm
    print_success "Secured shared memory in fstab"
fi

# 8. Secure /tmp directory
print_section "Securing /tmp directory"

if ! grep -q '/tmp' /etc/fstab; then
    echo "tmpfs /tmp tmpfs defaults,noexec,nosuid,nodev 0 0" >> /etc/fstab
    print_success "Added /tmp mount point to fstab"
else
    print_warning "/tmp already has an entry in fstab. Please check it manually."
fi

# 9. Set sticky bit on world-writable directories
print_section "Setting sticky bit on world-writable directories"

find / -type d -perm -0002 2>/dev/null | xargs chmod a+t 2>/dev/null
print_success "Sticky bit set on world-writable directories"

# 10. Create legal banner
print_section "Creating legal banner"

cat > /etc/issue << EOF
**************************************************************************
*                                                                        *
*                         AUTHORIZED ACCESS ONLY                         *
*                                                                        *
* This system is restricted to authorized users for business purposes.   *
* Unauthorized access is prohibited and may result in prosecution.       *
*                                                                        *
**************************************************************************
EOF

cp /etc/issue /etc/issue.net
print_success "Legal banner created"

# 11. Final steps and recommendations
print_section "Hardening complete!"
echo
echo -e "${YELLOW}IMPORTANT RECOMMENDATIONS:${NC}"
echo " 1. Create non-root user(s) for administration"
echo " 2. Verify SSH access before closing this session"
echo " 3. Reboot the system to apply all changes"
echo " 4. Consider installing intrusion detection (AIDE, fail2ban)"
echo " 5. Set up regular security updates"
echo " 6. Implement regular backup strategy"
echo
echo -e "${GREEN}System hardening basic measures have been applied.${NC}"
